/*
 * Copyright (c) 2016, MasterCard International Incorporated and/or its
 * affiliates. All rights reserved.
 *
 * The contents of this file may only be used subject to the MasterCard
 * Mobile Payment SDK for MCBP and/or MasterCard Mobile MPP UI SDK
 * Materials License.
 *
 * Please refer to the file LICENSE.TXT for full details.
 *
 * TO THE EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT
 * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON INFRINGEMENT. TO THE EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * MASTERCARD OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

apply plugin: 'com.android.library'

android {

    publishNonDefault true

    compileSdkVersion 23
    buildToolsVersion '25.0.0'

    // TODO: Re-enable NDK automatic build system once Gradle has a proper support for it
    // (i.e. support for custom Android.mk files)
    sourceSets.main {
        jniLibs.srcDir './jniLibs'
        jni.srcDirs = []  //disable automatic ndk-build call
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0.6c"

        // Supported SDK Protocols (DO NOT CHANGE unless you know what you are doing!)
        buildConfigField "String[]", "FORCE_TLS_PROTOCOL", "{\"TLSv1.2\"}"

        // ------------------------
        // Configuration Parameters
        // ------------------------

        // Specify whether the SDK allows NFC exchange with screen off. Note that certain devices
        // block this by default. In case you would like to block it also on those devices that
        // allows NFC when the screen is OFF please keep this parameter set to false
        buildConfigField "boolean", "SCREEN_OFF_ALLOWED", "false"

        // Specify whether the SDK should support Wallet PIN (true) or Card Level Pin (false)
        buildConfigField "boolean", "WALLET_PIN", "true"

        // Specify the MPP Lite implementation to be used.
        buildConfigField "String", "MPP_TYPE", "\"mcbp1\""

        // Specify whether the crypto operations should be performed with native C++ modules (true)
        // or using the default Java implementation (false)
        // EXPERIMENTAL: This mode is currently experimental.
        buildConfigField "boolean", "NATIVE_CRYPTO_SERVICE", "false"

        // Here you can specify your own 'hard-coded' component for the static part of the DB key
        buildConfigField "byte[]", "MPA_KEY", "{(byte) 0x0D, (byte) 0xBC, (byte) 0xEB, " +
                "(byte) 0x2E, (byte) 0x0C, (byte) 0xB9, (byte) 0xB7, (byte) 0xC6, (byte) 0x6B, " +
                "(byte) 0xDC, (byte) 0xD4, (byte) 0x30, (byte) 0x56, (byte) 0x3A, (byte) 0x43, " +
                "(byte) 0xFC}"
    }

    compileOptions {
        //noinspection GroovyAssignabilityCheck
        sourceCompatibility JavaVersion.VERSION_1_7
        //noinspection GroovyAssignabilityCheck
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            // Proguard is not enabled at the library level.
            // Consider enabling it at the Android application level.
            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':mcbp')
    compile project(':mobile-api-core')
    compile 'com.google.android.gms:play-services-gcm:8.4.0'
}

android.libraryVariants.all { variant ->
    task("_generate${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        println "Generates Javadoc for $variant.name."
        group 'Documentation'
        source = variant.javaCompile.source
        destinationDir = file("../../docs/$project.name")
        ext.androidJar =
                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        println "Done. Destination: " + destinationDir
    }
}
