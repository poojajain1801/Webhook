/* Copyright (c) 2015 Nicolás Gómez, MIT License, https://github.com/muZk/custom-validator */

(function(){

    "use strict";

    var root = this,
        has_require = typeof require !== 'undefined';

    var _     = root._,
        async = root.async,
        validator = root.validator;

    if(typeof _ === 'undefined'){
        if(has_require)
            _ = require('underscore');
        else 
            throw new Error('custom-validator requires underscore, see http://underscorejs.org');
    }

    if(typeof async === 'undefined'){
        if(has_require)
            async = require('async');
        else 
            throw new Error('custom-validator requires async, see https://github.com/caolan/async');
    } 

    if(typeof validator === 'undefined'){
        if(has_require)
            validator = require('validator');
        else
            throw new Error('custom-validator requires validator, see https://github.com/chriso/validator.js');
    }

    function validate(validators){
        return _.map(validators, function(v){

            var base = {
                message: v.message,
                attr: v.attr,
                args: !_.isArray(v.args) ? [] : v.args
            };

            var validatorFunc;

            if(_.isString(v.validator))
                validatorFunc = function(object, next){
                    var val = validator[v.validator];
                    var toValidate = [object[this.attr]];
                    var result = val.apply(validator, _.union(toValidate, this.args));
                    next(result);
                };
            else
                validatorFunc = function(object, next){
                    var val = v.validator;
                    var toValidate = [object[this.attr]];
                    val(toValidate, next);
                };

            base.validate = validatorFunc;

            return base;
        });
    }

    function validateMultiple(validators){

        validators = validate(validators);

        return function(object, next){

            var iterator = function(item, callback){

                item.validate(object, function(isValid){
                    callback(null, {
                        message: item.message,
                        valid: isValid,
                        attr: item.attr
                    });
                });

            };

            async.map(validators, iterator, function(err, results){

                var result = {};
                var isValid = !_.findWhere(results, { valid: false });

                _.each(results, function(item){
                    result[item.attr] = result[item.attr] || [];
                    result[item.attr].push({ valid: item.valid, message: item.message });
                });

                _.each(result, function(value){
                	value.valid = !_.findWhere(value, { valid: false });
                });

                next(isValid, result);

            });

        };

    }

    var CustomValidator = {
    	validate: validate,
    	validateMultiple: validateMultiple
	};

    if(typeof exports !== 'undefined'){

    	if(typeof module !== 'undefined' && module.exports){
    		exports = module.exports = CustomValidator;
    	}

    } else {
    	root.CustomValidator = CustomValidator;
    }

}).call(this);
