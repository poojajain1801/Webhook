var validate = require('../index.js').validate,
  validateMultiple = require('../index.js').validateMultiple,
  assert = require("assert");

var validators = [
  {
    message: 'Alphanumeric',
    validator: 'isAlphanumeric',
    attr: 'username'
  },
  {
    message: 'Must be between 8 and 12 length',
    validator: 'isLength',
    args: [8, 12],
    attr: 'username'
  },
  {
    message: 'Valid email',
    validator: 'isEmail',
    attr: 'email'
  },
  {
    message: 'Unique email',
    attr: 'email',
    validator: function(email, next){
    if(email == 'example@example.com')
      next(false);
    else
      next(true);
    }
  }
]

describe('Validate', function(){


  describe('#validate', function(){

    it('should pass validation using a simple validator', function(done){

      var vals = validate(validators);

      vals[0].validate({ username: 'abds12' }, function(isValid){
      done(!isValid ? 'should be valid' : undefined);
      })

    })

    it('should fail validation using a simple validator', function(done){

      var vals = validate(validators);

      vals[2].validate({ email: 'imnotvalid' }, function(isValid){
      done(isValid ? 'should not be valid' : undefined);
      })

    });

    it('should pass validation using validator with arguments', function(done){

      var vals = validate(validators);

      vals[1].validate({ username: 'abdc1234' }, function(isValid){
      done(!isValid ? 'should be valid' : undefined);
      })

    });

    it('should pass validation using validator with arguments', function(done){

      var vals = validate(validators);

      vals[1].validate({ username: 'abc' }, function(isValid){
      done(isValid ? 'should be invalid' : undefined);
      })

    });

    it('should pass with custom validator', function(done){

      var vals = validate(validators);

      vals[3].validate({ email: 'user@example.com' }, function(isValid){
      done(!isValid ? 'should be valid' : undefined);
      });

    });

    it('should not pass with custom validator', function(done){

      var vals = validate(validators);

      vals[3].validate({ email: 'example@example.com' }, function(isValid){
      done(isValid ? 'should be invalid' : undefined);
      });

    });

  });

  describe('#validateMultiple', function(){

    it('should pass everything', function(done){

      var vals = validateMultiple(validators);

      vals({ username: 'abdc1234', email: 'user@example.com' }, function(isValid, obj){

      assert.equal(isValid, true);

      assert.equal(obj.username.length, 2);
      assert.equal(obj.username.valid, true);

      assert.equal(obj.username[0].valid, true);
      assert.equal(obj.username[0].message, validators[0].message);
      
      assert.equal(obj.username[1].valid, true);
      assert.equal(obj.username[1].message, validators[1].message);

      assert.equal(obj.email.length, 2);
      assert.equal(obj.email.valid, true);

      assert.equal(obj.email[0].valid, true);
      assert.equal(obj.email[0].message, validators[2].message);


      assert.equal(obj.email[1].valid, true);
      assert.equal(obj.email[1].message, validators[3].message);

      done();


      });

    })

    it('should fail on email', function(done){

      var vals = validateMultiple(validators);

      vals({ username: 'abdc1234', email: 'example@example.com' }, function(isValid, obj){

        assert.equal(isValid, false);

        assert.equal(obj.username.length, 2);
        assert.equal(obj.username.valid, true);

        assert.equal(obj.username[0].valid, true);
        assert.equal(obj.username[0].message, validators[0].message);
        
        assert.equal(obj.username[1].valid, true);
        assert.equal(obj.username[1].message, validators[1].message);

        assert.equal(obj.email.length, 2);
        assert.equal(obj.email.valid, false);

        assert.equal(obj.email[0].valid, true);
        assert.equal(obj.email[0].message, validators[2].message);

        assert.equal(obj.email[1].valid, false);
        assert.equal(obj.email[1].message, validators[3].message);

        done();


      });

    });

  })

})